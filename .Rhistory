data_train_unmodified = loadCSVDataSet("./UNSW_NB15_training-set.csv")
table(data_train_unmodified$attack_cat)
attr_list = c(8, 28, 13, 9, 29, 10, 36, 2, 33, 12, 37 ,11, 35, 7, 14, 34, 44)
data_train_modified <- selectAttributes(data_train_unmodified, attr_list)
data_train_modified <- removeFuzzingSamples(data_train_modified)
data_train_modified <- binaryClassification(data_train_modified)
data_train_unmodified <- binaryClassification(data_train_unmodified)
table(data_train_unmodified$attack_cat)
fit_data_unmod <- generateAndPlotBinaryDecissionTree(data_train_unmodified)
fit_data_mod <- generateAndPlotBinaryDecissionTree(data_train_modified)
predict <- function(fit, df) {
predict_unseen <- predict(fit, df, type = 'class')
t <- table(predict_unseen, df$attack_cat)
results <- as.data.frame.matrix(t)
results$attack_percentage <- (results$Attack * 100) / sum(results$Attack)
results$normal_percentage <- (results$Normal * 100) / sum(results$Normal)
}
calculatePrecission <- function(fit, df) {
predict_unseen <- predict(fit, df, type = 'class')
t <- table(predict_unseen, df$attack_cat)
results <- as.data.frame.matrix(t)
results$attack_percentage <- (results$Attack * 100) / sum(results$Attack)
results$normal_percentage <- (results$Normal * 100) / sum(results$Normal)
}
calculatePrecission <- function(fit, df) {
predict_unseen <- predict(fit, df, type = 'class')
t <- table(predict_unseen, df$attack_cat)
results <- as.data.frame.matrix(t)
results$attack_percentage <- (results$Attack * 100) / sum(results$Attack)
results$normal_percentage <- (results$Normal * 100) / sum(results$Normal)
}
require(rpart)
require(rpart.plot)
loadCSVDataSet <- function(filename) {
ds <- read.csv(file=filename, header=TRUE, sep=",")
return(ds)
}
selectAttributes <- function(df, attributes_list) {
df <- df[,attributes_list ]
return(df)
}
removeFuzzingSamples <- function(df) {
df <- df[!(df$attack_cat == "Fuzzers"),]
return(df)
}
binaryClassification <- function(df) {
df$attack_cat <- as.character(df$attack_cat)
df$attack_cat[df$attack_cat != "Normal"] <- "Attack"
df$attack_cat <- as.factor(df$attack_cat)
return(df)
}
generateAndPlotBinaryDecissionTree <- function(df) {
fit <- rpart(attack_cat~., data = df, method = 'class')
rpart.plot(fit, extra = 106)
return(fit)
}
calculatePrecission <- function(fit, df) {
predict_unseen <- predict(fit, df, type = 'class')
t <- table(predict_unseen, df$attack_cat)
results <- as.data.frame.matrix(t)
results$attack_percentage <- (results$Attack * 100) / sum(results$Attack)
results$normal_percentage <- (results$Normal * 100) / sum(results$Normal)
}
require(rpart)
require(rpart.plot)
loadCSVDataSet <- function(filename) {
ds <- read.csv(file=filename, header=TRUE, sep=",")
return(ds)
}
selectAttributes <- function(df, attributes_list) {
df <- df[,attributes_list ]
return(df)
}
removeFuzzingSamples <- function(df) {
df <- df[!(df$attack_cat == "Fuzzers"),]
return(df)
}
binaryClassification <- function(df) {
df$attack_cat <- as.character(df$attack_cat)
df$attack_cat[df$attack_cat != "Normal"] <- "Attack"
df$attack_cat <- as.factor(df$attack_cat)
return(df)
}
generateAndPlotBinaryDecissionTree <- function(df) {
fit <- rpart(attack_cat~., data = df, method = 'class')
rpart.plot(fit, extra = 106)
return(fit)
}
calculatePrecission <- function(fit, df) {
predict_unseen <- predict(fit, df, type = 'class')
t <- table(predict_unseen, df$attack_cat)
results <- as.data.frame.matrix(t)
results$attack_percentage <- (results$Attack * 100) / sum(results$Attack)
results$normal_percentage <- (results$Normal * 100) / sum(results$Normal)
return(results)
}
processData <- function(df) {
attr_list = c(8, 28, 13, 9, 29, 10, 36, 2, 33, 12, 37 ,11, 35, 7, 14, 34, 44)
df <- selectAttributes(df, attr_list)
df <- removeFuzzingSamples(df)
df <- binaryClassification(df)
return(df)
}
data_train_unmodified = loadCSVDataSet("./UNSW_NB15_training-set.csv")
table(data_train_unmodified$attack_cat)
data_train_modified <- processData(data_train_unmodified)
data_train_unmodified <- binaryClassification(data_train_unmodified)
table(data_train_unmodified$attack_cat)
fit_data_unmod <- generateAndPlotBinaryDecissionTree(data_train_unmodified)
fit_data_mod <- generateAndPlotBinaryDecissionTree(data_train_modified)
data_test_unmodified <- loadCSVDataSet("./UNSW_NB15_testing-set.csv")
data_test_modified <- processData(data_test_unmodified)
data_test_unmodified <- binaryClassification(data_test_unmodified)
table(data_test_unmodified$attack_cat)
res_unmod <- calculatePrecission(fit_data_unmod, data_test_unmodified)
data_train_unmodified <- data_train_unmodified[,-c(3, 5, 45)]
data_train_modified <- data_train_modified[,-c(3, 5, 45)]
fit_data_unmod <- generateAndPlotBinaryDecissionTree(data_train_unmodified)
fit_data_mod <- generateAndPlotBinaryDecissionTree(data_train_modified)
data_test_unmodified <- loadCSVDataSet("./UNSW_NB15_testing-set.csv")
data_test_modified <- processData(data_test_unmodified)
data_test_unmodified <- binaryClassification(data_test_unmodified)
table(data_test_unmodified$attack_cat)
res_unmod <- calculatePrecission(fit_data_unmod, data_test_unmodified)
res_mod <- calculatePrecission(fit_data_mod, data_test_modified)
View(res_mod)
View(res_unmod)
print("UNMOD RESULTS")
print("Attack Precission %:")
print(res_unmod$attack_percentage)
print("Normal Precission %:")
print(res_unmod$normal_percentage)
print("MOD RESULTS")
print("Attack Precission %:")
print(res_mod$attack_percentage)
print("Normal Precission %:")
print(res_mod$normal_percentage)
?par()
plotResults <- function(results) {
slices <- c(10, 12,4, 16, 8)
lbls <- c("US", "UK", "Australia", "Germany", "France")
pie(slices, labels = lbls, main="Pie Chart of Countries")
}
require(rpart)
require(rpart.plot)
loadCSVDataSet <- function(filename) {
ds <- read.csv(file=filename, header=TRUE, sep=",")
return(ds)
}
selectAttributes <- function(df, attributes_list) {
df <- df[,attributes_list ]
return(df)
}
removeFuzzingSamples <- function(df) {
df <- df[!(df$attack_cat == "Fuzzers"),]
return(df)
}
binaryClassification <- function(df) {
df$attack_cat <- as.character(df$attack_cat)
df$attack_cat[df$attack_cat != "Normal"] <- "Attack"
df$attack_cat <- as.factor(df$attack_cat)
return(df)
}
generateAndPlotBinaryDecissionTree <- function(df) {
fit <- rpart(attack_cat~., data = df, method = 'class')
rpart.plot(fit, extra = 106)
return(fit)
}
calculatePrecission <- function(fit, df) {
predict_unseen <- predict(fit, df, type = 'class')
t <- table(predict_unseen, df$attack_cat)
results <- as.data.frame.matrix(t)
results$attack_percentage <- (results$Attack * 100) / sum(results$Attack)
results$normal_percentage <- (results$Normal * 100) / sum(results$Normal)
return(results)
}
processData <- function(df) {
attr_list = c(8, 28, 13, 9, 29, 10, 36, 2, 33, 12, 37 ,11, 35, 7, 14, 34, 44)
df <- selectAttributes(df, attr_list)
df <- removeFuzzingSamples(df)
df <- binaryClassification(df)
return(df)
}
plotBinaryResults <- function(results) {
slices <- c(10, 12,4, 16, 8)
lbls <- c("US", "UK", "Australia", "Germany", "France")
pie(slices, labels = lbls, main="Pie Chart of Countries")
}
data_train_unmodified = loadCSVDataSet("./UNSW_NB15_training-set.csv")
table(data_train_unmodified$attack_cat)
data_train_modified <- processData(data_train_unmodified)
data_train_unmodified <- binaryClassification(data_train_unmodified)
table(data_train_unmodified$attack_cat)
data_train_unmodified <- data_train_unmodified[,-c(3, 5, 45)]
data_train_modified <- data_train_modified[,-c(3, 5, 45)]
fit_data_unmod <- generateAndPlotBinaryDecissionTree(data_train_unmodified)
fit_data_mod <- generateAndPlotBinaryDecissionTree(data_train_modified)
data_test_unmodified <- loadCSVDataSet("./UNSW_NB15_testing-set.csv")
data_test_modified <- processData(data_test_unmodified)
data_test_unmodified <- binaryClassification(data_test_unmodified)
table(data_test_unmodified$attack_cat)
res_unmod <- calculatePrecission(fit_data_unmod, data_test_unmodified)
res_mod <- calculatePrecission(fit_data_mod, data_test_modified)
table(res_mod)
View(res_mod)
data_train_modified <- processData(data_train_unmodified)
data_train_unmodified <- binaryClassification(data_train_unmodified)
data_train_unmodified = loadCSVDataSet("./UNSW_NB15_training-set.csv")
table(data_train_unmodified$attack_cat)
data_train_modified <- processData(data_train_unmodified)
data_train_unmodified <- binaryClassification(data_train_unmodified)
table(data_train_unmodified$attack_cat)
data_train_unmodified <- data_train_unmodified[,-c(3, 5, 45)]
data_train_modified <- data_train_modified[,-c(3, 5, 45)]
fit_data_unmod <- generateAndPlotBinaryDecissionTree(data_train_unmodified)
fit_data_mod <- generateAndPlotBinaryDecissionTree(data_train_modified)
data_test_unmodified <- loadCSVDataSet("./UNSW_NB15_testing-set.csv")
data_test_modified <- processData(data_test_unmodified)
data_test_unmodified <- binaryClassification(data_test_unmodified)
table(data_test_unmodified$attack_cat)
res_unmod <- calculatePrecission(fit_data_unmod, data_test_unmodified)
res_mod <- calculatePrecission(fit_data_mod, data_test_modified)
table(res_mod)
View(res_mod)
plot_results(res_mod)
plotBinaryResults(res_mod)
plotBinaryResults(res_mod)
plotBinaryResults <- function(results) {
print("hola")
slices <- c(results$attack_percentage[1], results$attack_percentage[2], results$normal_percentage[2], results$normal_percentage[1])
lbls <- c("US", "UK", "Australia", "Germany")
pie(slices, labels = lbls, main="Percetages Pie Chart of Countries")
}
plotBinaryResults(res_mod)
plotBinaryResults(res_mod)
plotBinaryResults <- function(results) {
slices <- c(results$attack_percentage[1], results$attack_percentage[2], results$normal_percentage[2], results$normal_percentage[1])
lbls <- c("% Correctas Attack", "% Incorrectas Attack", "% Correctas Normal", "% Incorrectas normal")
pie(slices, labels = lbls, main="PrecisiÃ³n del modelo")
}
plotBinaryResults(res_mod)
plotBinaryResults <- function(results) {
slices <- c(results$attack_percentage[1], results$attack_percentage[2], results$normal_percentage[2], results$normal_percentage[1])
lbls <- c("% Correctas Attack " + results$attack_percentage[1], "% Incorrectas Attack", "% Correctas Normal", "% Incorrectas normal")
pie(slices, labels = lbls, main="PrecisiÃ³n del modelo")
}
plotBinaryResults(res_mod)
plotBinaryResults <- function(results) {
slices <- c(results$attack_percentage[1], results$attack_percentage[2], results$normal_percentage[2], results$normal_percentage[1])
lbls <- c("% Correctas Attack " + as.character(results$attack_percentage[1]), "% Incorrectas Attack", "% Correctas Normal", "% Incorrectas normal")
pie(slices, labels = lbls, main="PrecisiÃ³n del modelo")
}
plotBinaryResults(res_mod)
label_ac <- "% Correctas Attack " + as.character(results$attack_percentage[1])
plotBinaryResults <- function(results) {
slices <- c(results$attack_percentage[1], results$attack_percentage[2], results$normal_percentage[2], results$normal_percentage[1])
label_ac <- "% Correctas Attack " + as.character(results$attack_percentage[1])
lbls <- c("% Correctas Attack " + as.character(results$attack_percentage[1]), "% Incorrectas Attack", "% Correctas Normal", "% Incorrectas normal")
pie(slices, labels = lbls, main="PrecisiÃ³n del modelo")
}
plotBinaryResults(res_mod)
plotBinaryResults <- function(results) {
slices <- c(results$attack_percentage[1], results$attack_percentage[2], results$normal_percentage[2], results$normal_percentage[1])
label_ac <- paste("% Correctas Attack " + as.character(results$attack_percentage[1]))
lbls <- c("% Correctas Attack " + as.character(results$attack_percentage[1]), "% Incorrectas Attack", "% Correctas Normal", "% Incorrectas normal")
pie(slices, labels = lbls, main="PrecisiÃ³n del modelo")
}
plotBinaryResults(res_mod)
plotBinaryResults <- function(results) {
slices <- c(results$attack_percentage[1], results$attack_percentage[2], results$normal_percentage[2], results$normal_percentage[1])
label_ac <- paste("% Correctas Attack " ,as.character(results$attack_percentage[1]))
lbls <- c("% Correctas Attack " + as.character(results$attack_percentage[1]), "% Incorrectas Attack", "% Correctas Normal", "% Incorrectas normal")
pie(slices, labels = lbls, main="PrecisiÃ³n del modelo")
}
plotBinaryResults(res_mod)
plotBinaryResults <- function(results) {
slices <- c(results$attack_percentage[1], results$attack_percentage[2], results$normal_percentage[2], results$normal_percentage[1])
label_ac <- paste("% Correctas Attack " ,as.character(results$attack_percentage[1]))
print(label_ac)
lbls <- c("% Correctas Attack ", "% Incorrectas Attack", "% Correctas Normal", "% Incorrectas normal")
pie(slices, labels = lbls, main="PrecisiÃ³n del modelo")
}
plotBinaryResults(res_mod)
plotBinaryResults <- function(results) {
slices <- c(results$attack_percentage[1], results$attack_percentage[2], results$normal_percentage[2], results$normal_percentage[1])
label_ac <- paste("% Correctas Attack " ,as.character(results$attack_percentage[1]))
print(label_ac[1:26])
lbls <- c("% Correctas Attack ", "% Incorrectas Attack", "% Correctas Normal", "% Incorrectas normal")
pie(slices, labels = lbls, main="PrecisiÃ³n del modelo")
}
plotBinaryResults(res_mod)
plotBinaryResults <- function(results) {
slices <- c(results$attack_percentage[1], results$attack_percentage[2], results$normal_percentage[2], results$normal_percentage[1])
label_ac <- paste("% Correctas Attack " ,as.character(results$attack_percentage[1]))
print(substr(label_ac, 1, nchar(label_ac)-11))
lbls <- c("% Correctas Attack ", "% Incorrectas Attack", "% Correctas Normal", "% Incorrectas normal")
pie(slices, labels = lbls, main="PrecisiÃ³n del modelo")
}
plotBinaryResults(res_mod)
plotBinaryResults <- function(results) {
slices <- c(results$attack_percentage[1], results$attack_percentage[2], results$normal_percentage[2], results$normal_percentage[1])
label_ac <- paste("% Correctas Attack " ,as.character(results$attack_percentage[1]))
label_ac <- substr(label_ac, 1, nchar(label_ac)-11)
label_ai <- paste("% Correctas Attack " ,as.character(results$attack_percentage[2]))
label_ai <- substr(label_ai, 1, nchar(label_ai)-11)
label_nc <- paste("% Correctas Attack " ,as.character(results$normal_percentage[2]))
label_nc <- substr(label_nc, 1, nchar(label_nc)-11)
label_ni <- paste("% Correctas Attack " ,as.character(results$normal_percentage[1]))
label_ni <- substr(label_ni, 1, nchar(label_ni)-11)
lbls <- c(label_ac, label_ai, label_nc, label_ni)
pie(slices, labels = lbls, main="PrecisiÃ³n del modelo")
}
plotBinaryResults(res_mod)
plotBinaryResults(res_unmod)
View(res_unmod)
plotBinaryResults <- function(results) {
slices <- c(results$attack_percentage[1], results$attack_percentage[2], results$normal_percentage[2], results$normal_percentage[1])
label_ac <- paste("% Correctas Attack " ,as.character(results$attack_percentage[1]))
label_ac <- substr(label_ac, 1, nchar(label_ac)-21)
label_ai <- paste("% Correctas Attack " ,as.character(results$attack_percentage[2]))
label_ai <- substr(label_ai, 1, nchar(label_ai)-21)
label_nc <- paste("% Correctas Attack " ,as.character(results$normal_percentage[2]))
label_nc <- substr(label_nc, 1, nchar(label_nc)-21)
label_ni <- paste("% Correctas Attack " ,as.character(results$normal_percentage[1]))
label_ni <- substr(label_ni, 1, nchar(label_ni)-21)
lbls <- c(label_ac, label_ai, label_nc, label_ni)
pie(slices, labels = lbls, main="PrecisiÃ³n del modelo")
}
plotBinaryResults(res_unmod)
plotBinaryResults(res_mod)
plotBinaryResults <- function(results) {
slices <- c(results$attack_percentage[1], results$attack_percentage[2], results$normal_percentage[2], results$normal_percentage[1])
label_ac <- paste("% Correctas Attack " ,as.character(results$attack_percentage[1]))
label_ac <- substr(label_ac, 1, nchar(label_ac)-21)
label_ai <- paste("% Incorrectas Attack " ,as.character(results$attack_percentage[2]))
label_ai <- substr(label_ai, 1, nchar(label_ai)-21)
label_nc <- paste("% Correctas Normal " ,as.character(results$normal_percentage[2]))
label_nc <- substr(label_nc, 1, nchar(label_nc)-21)
label_ni <- paste("% Incorrectas Normal " ,as.character(results$normal_percentage[1]))
label_ni <- substr(label_ni, 1, nchar(label_ni)-21)
lbls <- c(label_ac, label_ai, label_nc, label_ni)
pie(slices, labels = lbls, main="PrecisiÃ³n del modelo")
}
plotBinaryResults(res_mod)
plotBinaryResults <- function(results) {
slices <- c(results$attack_percentage[1], results$attack_percentage[2], results$normal_percentage[2], results$normal_percentage[1])
label_ac <- paste("%  Attack " ,as.character(results$attack_percentage[1]))
label_ac <- substr(label_ac, 1, nchar(label_ac)-21)
label_ai <- paste("%  Attack " ,as.character(results$attack_percentage[2]))
label_ai <- substr(label_ai, 1, nchar(label_ai)-21)
label_nc <- paste("%  Normal " ,as.character(results$normal_percentage[2]))
label_nc <- substr(label_nc, 1, nchar(label_nc)-21)
label_ni <- paste("% " ,as.character(results$normal_percentage[1]))
label_ni <- substr(label_ni, 1, nchar(label_ni)-21)
lbls <- c(label_ac, label_ai, label_nc, label_ni)
pie(slices, labels = lbls, main="PrecisiÃ³n del modelo")
}
plotBinaryResults(res_mod)
plotBinaryResults <- function(results) {
slices <- c(results$attack_percentage[1], results$attack_percentage[2], results$normal_percentage[2], results$normal_percentage[1])
label_ac <- paste("% Correctas Attack " ,as.character(results$attack_percentage[1]))
label_ac <- substr(label_ac, 1, nchar(label_ac)-21)
label_ai <- paste("% Incorrectas Attack " ,as.character(results$attack_percentage[2]))
#label_ai <- substr(label_ai, 1, nchar(label_ai)-21)
label_nc <- paste("% Correctas Normal " ,as.character(results$normal_percentage[2]))
#label_nc <- substr(label_nc, 1, nchar(label_nc)-21)
label_ni <- paste("% Incorrectas Normal " ,as.character(results$normal_percentage[1]))
label_ni <- substr(label_ni, 1, nchar(label_ni)-21)
lbls <- c(label_ac, label_ai, label_nc, label_ni)
pie(slices, labels = lbls, main="PrecisiÃ³n del modelo")
}
plotBinaryResults(res_mod)
plotBinaryResults <- function(results) {
slices <- c(results$attack_percentage[1], results$attack_percentage[2], results$normal_percentage[2], results$normal_percentage[1])
label_ac <- paste("% Correctas Attack " ,as.character(results$attack_percentage[1]))
#label_ac <- substr(label_ac, 1, nchar(label_ac)-21)
label_ai <- paste("% Incorrectas Attack " ,as.character(results$attack_percentage[2]))
#label_ai <- substr(label_ai, 1, nchar(label_ai)-21)
label_nc <- paste("% Correctas Normal " ,as.character(results$normal_percentage[2]))
#label_nc <- substr(label_nc, 1, nchar(label_nc)-21)
label_ni <- paste("% Incorrectas Normal " ,as.character(results$normal_percentage[1]))
#label_ni <- substr(label_ni, 1, nchar(label_ni)-21)
lbls <- c(label_ac, label_ai, label_nc, label_ni)
pie(slices, labels = lbls, main="PrecisiÃ³n del modelo")
}
plotBinaryResults(res_mod)
plotBinaryResults(res_unmod)
barplot(height = table(data_train_modified$attack_cat), col = "wheat",
main = "Access Vector distribution")
barplot(height = table(data_train_unmodified$attack_cat), col = "wheat",
main = "Access Vector distribution")
library(gridExtra)
install.packages(c("grid", "gridExtra"))
barplot(height = table(data_train_unmodified$attack_cat), col = "wheat",
main = "Access Vector distribution")
library(gridExtra)
library(grid)
grid.table(data_train_modified$attack_cat)
tablee <- table(data_train_modified$attack_cat)
print(tablee)
grid.table(tablee)
grid.tablee
barplot(height = table(data_train_unmodified$attack_cat), col = "Blue",
main = "Samples Classes distribution")
barplot(height = table(data_train_unmodified$attack_cat), col = c("red","Blue"),
main = "Samples Classes distribution")
plotSamplesDistribution <- function(df, colors_list) {
barplot(height = table(df$attack_cat), col = colors_list,
main = "Samples Classes distribution")
}
plotSamplesDistribution <- function(data, colors_list) {
barplot(height = table(data), col = colors_list,
main = "Samples Classes distribution")
}
plotSamplesDistribution(data_test_modified$attack_cat, c("red","Blue"))
---
title: "Laboratorio Final - Data Driven Security"
author: "Ismael Shaban Y Antonio Cruz"
date: "Enero 2019"
output:
html_notebook:
number_sections: yes
theme: spacelab
toc: yes
toc_float: no
html_document:
toc: yes
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = FALSE)
knitr::opts_chunk$set(fig.align = 'center')
```
```{r bootstrap, message=FALSE, warning=FALSE, include=FALSE}
if (!suppressMessages(suppressWarnings(require("plyr", quietly = T)))) {
suppressMessages(suppressWarnings(install.packages("plyr", repos = "http://cran.rstudio.com/", quiet = T, dependencies = T)))
}
if (!suppressMessages(suppressWarnings(require("dplyr", quietly = T)))) {
suppressMessages(suppressWarnings(install.packages("dplyr", repos = "http://cran.rstudio.com/", quiet = T, dependencies = T)))
}
if (!suppressMessages(suppressWarnings(require("ggplot2", quietly = T)))) {
suppressMessages(suppressWarnings(install.packages("ggplot2", repos = "http://cran.rstudio.com/", quiet = T, dependencies = T)))
}
```
``` {r themes, echo=FALSE, eval=FALSE}
themes <- "default", "cerulean", "journal", "flatly", "readable", "spacelab", "united", "cosmo", "lumen", "paper", "sandstone", "simplex", "yeti"
```
## Sobre el laboratorio...
El objetivo de la prÃ¡ctica de Data Driven Security es ser capaz de aplicar una metodologÃ­a de trabajo que nos permita resolver problemas o preguntas relacionadas con la ciberseguridad a travÃÂ©s de la correcta exploraciÃÂ³n, manipulaciÃÂ³n y visualizaciÃÂ³n de los datos. La estructura de la prÃÂ¡ctica trata de replicar los pasos de la metodologÃ­a aprendida durante la parte teÃÂ³rica de la asignatura.
---
#  DescripciÃÂ³n del problema
Actualmente, las empresas tienen cada vez un mayor riego de sufrir un ciberataque. El principal motivo es el continuo proceso de digitalicaciÃÂ³n que se esta llevando a cabo. Si ademÃÂ¡s sumamos al continuo crecimiento de ciberataques y a la continua evoluciÃÂ³n de estos, se hace completamente necesario la evoluciÃÂ³n de las tÃÂ©cnicas defesensivas.
Durante estos ÃÂºltimos aÃÂ±os, los Security Information and Event Managemen (SIEM) comerciales estan apostando cada vez mÃÂ¡s fuerte por la utilizaciÃÂ³n de algoritmos de Machine learning (ML) para la detecciÃÂ³n de ataques. Cabe destacar que los algoritmos de ML se estan utilizando en diferentes areas de la ciberseguridad **[1](https://www.computerworld.com.au/article/631162/5-top-machine-learning-use-cases-security/)**.
En base a los problemas y necesidades anteriormente expuestos, para la realizaciÃÂ³n de esta prÃÂ¡ctica, se ha querido desarrollar un modelo que permita una rÃÂ¡pida detecciÃÂ³n de los ataques. Este modelo serÃÂ¡ entrenado mediante ML y deberÃÂ¡ ser capaz de distinguir un ataque de una actividad normal en base a ciertos atributos de la actividad de una red.
```{r r_logo, out.width = "50px"}
knitr::include_graphics("idsDiagram.png")
```
En la imagen anterior podemos ver un diagrama simplificado sobre el Sistema de DetecciÃ³ de Intrusos que harÃ­a uso del modelo desarrollado durante la presente prÃ¡ctica.
## La Pregunta
El modelo pretende ser capaz de clasificar datos en base a lo aprendido de datos diferentes. Por tanto, el modelo responderÃÂ¡ a una pregunta predictiva.
La pregunta es: ÃÂ¿Se puede detectar un ataque a elementos de una red en base a la monitorizaciÃÂ³n de ciertos atributos de su actividad?
knitr::opts_chunk$set(echo = FALSE)
knitr::opts_chunk$set(fig.align = 'center')
if (!suppressMessages(suppressWarnings(require("plyr", quietly = T)))) {
suppressMessages(suppressWarnings(install.packages("plyr", repos = "http://cran.rstudio.com/", quiet = T, dependencies = T)))
}
if (!suppressMessages(suppressWarnings(require("dplyr", quietly = T)))) {
suppressMessages(suppressWarnings(install.packages("dplyr", repos = "http://cran.rstudio.com/", quiet = T, dependencies = T)))
}
if (!suppressMessages(suppressWarnings(require("ggplot2", quietly = T)))) {
suppressMessages(suppressWarnings(install.packages("ggplot2", repos = "http://cran.rstudio.com/", quiet = T, dependencies = T)))
}
knitr::include_graphics("idsDiagram.png")
knitr::include_graphics("figures/RStudio-Logo-Blue-Gradient.png")
knitr::include_graphics("figures/rstudio_settings.png")
knitr::include_graphics("figures/rstudio_layout.png")
knitr::include_graphics("figures/git.png")
knitr::include_graphics("figures/new_project.png")
knitr::include_graphics("figures/git_staging.png")
knitr::include_graphics("figures/sign_up_github.png")
knitr::include_graphics("figures/new_github_repo.png")
knitr::include_graphics("figures/remote_address.png")
knitr::include_graphics("figures/push_btn.png")
knitr::include_graphics("figures/pull_btn.png")
knitr::include_graphics("figures/manage_packages.png")
library("ggplot2")
# now we can use functions exported by this package
url <- "https://raw.githubusercontent.com/offensive-security/exploitdb/master/files_exploits.csv"
url2 <- "https://raw.githubusercontent.com/offensive-security/exploit-database/master/files.csv"
exploitdb <-url
download.file(exploitdb, destfile = "db")
db <- read.csv("./db", header = T)
db_aggr <- dplyr::count(db, platform, sort = T)
ggplot(db_aggr, aes(x="", y=n, fill=platform))+ geom_bar(width = 1, stat = "identity")
db_aggr <- dplyr::count(db, platform, sort = T)
ggplot(head(db_aggr), aes(x=platform, y=n, fill=platform)) + geom_bar(stat = "identity")
knitr::opts_chunk$set(echo = FALSE)
knitr::opts_chunk$set(fig.align = 'center')
if (!suppressMessages(suppressWarnings(require("rpart", quietly = T)))) {
suppressMessages(suppressWarnings(install.packages("rpart", repos = "http://cran.rstudio.com/", quiet = T, dependencies = T)))
}
if (!suppressMessages(suppressWarnings(require("rpart.plot", quietly = T)))) {
suppressMessages(suppressWarnings(install.packages("rpart.plot", repos = "http://cran.rstudio.com/", quiet = T, dependencies = T)))
}
if (!suppressMessages(suppressWarnings(require("ggplot2", quietly = T)))) {
suppressMessages(suppressWarnings(install.packages("ggplot2", repos = "http://cran.rstudio.com/", quiet = T, dependencies = T)))
}
if (!suppressMessages(suppressWarnings(require("gridExtra", quietly = T)))) {
suppressMessages(suppressWarnings(install.packages("gridExtra", repos = "http://cran.rstudio.com/", quiet = T, dependencies = T)))
}
knitr::include_graphics("figures/idsDiagram.png")
knitr::include_graphics("figures/unsw-nb15-testbed.png")
source("./lab_code.R")
